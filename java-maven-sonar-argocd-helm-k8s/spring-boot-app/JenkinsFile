pipeline {
  agent {
    docker {
      image 'pushpasaparapu/custom-image:latest'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'mybranch', url: 'https://github.com/Pushpalathasaparapu/Jenkins-doc-helm-k8s.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://52.207.236.77:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "pushpasaparapu/samplecode:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }

    stage('Install Helm') {
      steps {
         sh 'curl -LO https://get.helm.sh/helm-v3.6.1-linux-amd64.tar.gz'
         sh 'tar -xvzf helm-v3.6.1-linux-amd64.tar.gz'
         sh 'su -c "cp linux-amd64/helm /usr/local/bin/helm"'
         sh 'helm version'
    }
}
   stage('Install AWS CLI') {
      steps {
        sh 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"'
        sh 'unzip awscliv2.zip'
        sh './aws/install'
        sh 'aws --version'
      }
    }

    stage('Deploy to EKS with Helm') {
            environment {
                KUBECONFIG = "/root/.kube/config"
                AWS_ACCESS_KEY_ID = "$credentials('aws-credentials').userAwsAccessKeyId}"
                AWS_SECRET_ACCESS_KEY = "$credentials('aws-credentials').userAwsSecretKey}"
            }
            steps {

               // Authenticate with cluster

               sh 'aws eks --region us-east-1 update-kubeconfig --name java'
    }
}

    stage ('Helm Deploy') {
      steps {
         script {
             sh 'helm install myrelease mychart --namespace helm-deployment --set image.tag=$BUILD_NUMBER'
       
              }
           }
       }
   }
}

