pipeline {
 // agent 
 // {
    //docker {
     // image 'pushpasaparapu/custom-image:latest'
     // args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
   // }
 // }
  agent any
   tools {
   maven 'maven'
   jdk 'java-11'
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'pushpa', url: 'https://github.com/Pushpalathasaparapu/Jenkins-doc-helm-k8s.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://35.173.199.60:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
     stage('Deploy to Tomcat') {
      steps {
        // Run the Ansible playbook to deploy the JAR file to Tomcat
        //echo '$PATH'
        //sh 'pwd'
        //sh 'ansible-playbook -i /etc/ansible/inventoryfile.yml /etc/ansible/playbook.yml'
	ansiblePlaybook credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ec2-user', inventory: 'inventoryfile.yml', playbook: 'playbook.yml'
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "pushpasaparapu/pipeline:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
  }
}
